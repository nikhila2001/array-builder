{"ast":null,"code":"var _jsxFileName = \"/home/sony/Desktop/array-builder/src/components/RandomArray.jsx\",\n  _s = $RefreshSig$();\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport Accordion from \"@mui/material/Accordion\";\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\nimport TextField from \"@mui/material/TextField\";\nimport { useState } from \"react\";\nimport ListOfActivities from \"./ListOfActivities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RandomArray() {\n  _s();\n  const [randomArray, setRandomArray] = useState([]);\n  const [arrayLength, setArrayLength] = useState();\n  const [showActivities, setShowActivities] = useState(false);\n  const dataTypes = [Number, String, Boolean, Object, Array, null, undefined];\n  const getRandomElement = dataType => {\n    switch (dataType) {\n      case Number:\n        return Math.floor(Math.random() * 100);\n      // Generate a random number between 0 and 100\n      case String:\n        return Math.random().toString(36).substring(7);\n      // Generate a random string\n      case Boolean:\n        return Math.random() < 0.5;\n      // Generate a random boolean\n      case Object:\n        return {\n          key: Math.random().toString(36).substring(7)\n        };\n      // Generate a random object\n      case Array:\n        return [1, 2, 3];\n      // Generate a sample array\n      case null:\n        return null;\n      case undefined:\n        return undefined;\n      default:\n        return null;\n    }\n  };\n  const generateRandomMixedArray = () => {\n    let newArray = [];\n    for (let i = 0; i < arrayLength; i++) {\n      const randomDataTypeIndex = Math.floor(Math.random() * dataTypes.length);\n      const randomDataType = dataTypes[randomDataTypeIndex];\n      const randomElement = getRandomElement(randomDataType);\n      newArray.push(randomElement);\n    }\n    setRandomArray(newArray);\n    setShowActivities(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      elevation: 0,\n      sx: {\n        marginTop: \"2rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Accordion, {\n        children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Array Length\",\n            type: \"text\",\n            inputProps: {\n              inputMode: \"numeric\",\n              pattern: \"[0-9]*\"\n            },\n            value: arrayLength,\n            onChange: e => setArrayLength(parseInt(e.target.value)),\n            sx: {\n              m: 2,\n              fontSize: \"1rem\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"success\",\n            onClick: generateRandomMixedArray,\n            size: \"small\",\n            sx: {\n              m: 2,\n              fontSize: \"1rem\",\n              fontWeight: \"bold\"\n            },\n            children: \"Generate Random Array?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n          children: randomArray.length > 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              display: \"flex\",\n              justifyContent: \"space-evenly\",\n              padding: \"0rem\",\n              color: \"green\",\n              fontSize: \"1.5rem\"\n            },\n            children: randomArray.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"green\"\n              },\n              children: JSON.stringify(element)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"error\",\n            children: \"No array generated yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListOfActivities, {\n      array: randomArray,\n      updateArray: setRandomArray,\n      showActivities: showActivities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(RandomArray, \"7WBDhPy1ImMYZnZWISwLQzMGSKg=\");\n_c = RandomArray;\nexport default RandomArray;\nvar _c;\n$RefreshReg$(_c, \"RandomArray\");","map":{"version":3,"names":["Box","Typography","Button","Accordion","AccordionSummary","AccordionDetails","TextField","useState","ListOfActivities","jsxDEV","_jsxDEV","Fragment","_Fragment","RandomArray","_s","randomArray","setRandomArray","arrayLength","setArrayLength","showActivities","setShowActivities","dataTypes","Number","String","Boolean","Object","Array","undefined","getRandomElement","dataType","Math","floor","random","toString","substring","key","generateRandomMixedArray","newArray","i","randomDataTypeIndex","length","randomDataType","randomElement","push","children","elevation","sx","marginTop","label","type","inputProps","inputMode","pattern","value","onChange","e","parseInt","target","m","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","onClick","size","fontWeight","display","justifyContent","padding","map","element","index","style","JSON","stringify","array","updateArray","_c","$RefreshReg$"],"sources":["/home/sony/Desktop/array-builder/src/components/RandomArray.jsx"],"sourcesContent":["import Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport Accordion from \"@mui/material/Accordion\";\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\nimport TextField from \"@mui/material/TextField\";\nimport { useState } from \"react\";\nimport ListOfActivities from \"./ListOfActivities\";\n\nfunction RandomArray() {\n  const [randomArray, setRandomArray] = useState([]);\n  const [arrayLength, setArrayLength] = useState();\n  const [showActivities, setShowActivities] = useState(false);\n\n  const dataTypes = [Number, String, Boolean, Object, Array, null, undefined];\n  const getRandomElement = (dataType) => {\n    switch (dataType) {\n      case Number:\n        return Math.floor(Math.random() * 100); // Generate a random number between 0 and 100\n      case String:\n        return Math.random().toString(36).substring(7); // Generate a random string\n      case Boolean:\n        return Math.random() < 0.5; // Generate a random boolean\n      case Object:\n        return { key: Math.random().toString(36).substring(7) }; // Generate a random object\n      case Array:\n        return [1, 2, 3]; // Generate a sample array\n      case null:\n        return null;\n      case undefined:\n        return undefined;\n      default:\n        return null;\n    }\n  };\n\n  const generateRandomMixedArray = () => {\n    let newArray = [];\n    for (let i = 0; i < arrayLength; i++) {\n      const randomDataTypeIndex = Math.floor(Math.random() * dataTypes.length);\n      const randomDataType = dataTypes[randomDataTypeIndex];\n      const randomElement = getRandomElement(randomDataType);\n      newArray.push(randomElement);\n    }\n    setRandomArray(newArray);\n    setShowActivities(true);\n  };\n\n  return (\n    <>\n      <Box  elevation={0} sx={{ marginTop: \"2rem\" }}>\n        <Accordion>\n          <AccordionSummary>\n            <TextField\n              label=\"Array Length\"\n              type=\"text\"\n              inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\" }}\n              value={arrayLength}\n              onChange={(e) => setArrayLength(parseInt(e.target.value))}\n              sx={{ m: 2, fontSize: \"1rem\" }}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              onClick={generateRandomMixedArray}\n              size=\"small\"\n              sx={{ m: 2, fontSize: \"1rem\", fontWeight: \"bold\" }}\n            >\n              Generate Random Array?\n            </Button>\n          </AccordionSummary>\n          <AccordionDetails>\n            {randomArray.length > 0 ? (\n              <Typography\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"space-evenly\",\n                  padding: \"0rem\",\n                  color: \"green\",\n                  fontSize: \"1.5rem\",\n                }}\n              >\n                {randomArray.map((element, index) => (\n                  <div style={{ color: \"green\" }} key={index}>\n                    {JSON.stringify(element)}\n                  </div>\n                ))}\n              </Typography>\n            ) : (\n              <Typography color={\"error\"}>No array generated yet.</Typography>\n            )}\n          </AccordionDetails>\n        </Accordion>\n      </Box>\n      <ListOfActivities\n        array={randomArray}\n        updateArray={setRandomArray}\n        showActivities={showActivities}\n      />\n    </>\n  );\n}\nexport default RandomArray;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}